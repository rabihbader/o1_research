example of exact api call we will be using fo the agent itself:
from openai import AsyncOpenAI
client = AsyncOpenAI()

response = client.chat.completions.create(
    model="o1-mini", # use this model name
    messages=[
        {
            "role": "user", # this model doesnt support system messages only use user messages both for system and user
            "content": "Write a bash script that takes a matrix represented as a string with format '[1,2],[3,4],[5,6]' and prints the transpose in the same format."
        }
    ]
)

print(response.choices[0].message.content)

this model also returns a count for reasoning tokens. always print these as follows:
response.usage.completion_tokens_details.reasoning_tokens

here is the sample perplexity web search api call:
from openai import AsyncOpenAI
import os

YOUR_API_KEY = os.getenv("PERPLEXITY_API_KEY")

# always print the web search query for the user and for debugging

messages = [
    {
        "role": "system",
        "content": (
            "You are an artificial intelligence assistant and you need to "
            "engage in a helpful, detailed, polite conversation with a user." # change this instruction to perform in depth web searches and return detailed results
        ),
    },
    {
        "role": "user",
        "content": (
            "How many stars are in the universe?"
        ),
    },
]

client = AsyncOpenAI(api_key=YOUR_API_KEY, base_url="https://api.perplexity.ai")

# chat completion without streaming
response = client.chat.completions.create(
    model="llama-3.1-sonar-large-128k-online", # use this model name
    messages=messages,
)
print(response.choices[0].message.content)



we will be building a resaerch AI agent which can take actions, using perplexity function to search the web and write file function to write a report about its findings.

we need to instruct the agent in meticulus detail so it can return search terms and actions within <></> tags son we can parse and use them programmatically. make sure search terms are appropriately converted to a list. pay special attention to parsing each searrch properly. instruct the model on the structure which it should return the search terms so we can parse them properly.
web searches should be performed in parallel using asyncio
Since not all actions can be taken at the same time, as the agent needs to wait for the search to complete, we need to instruct the agent to wait for the search to complete before taking the next action. 
agent needs to be as autonomous as possible within a infinite loop, continuing to research until it is satisfied with the results. and should be able to end the loop when it has enough information to write a report. if the agent response for report contasins ```markdown and ``` tags, extract the report from between these tags and write it to a markdown file only when these tags are found. these tags may not be present. if not present, write the entire response for the report to the markdown file.

reading and writing files should always implement encoding="utf-8" all files should always be saved under research folder. create this folder if it doesnt exist. 

report should be written in markdown format in a markdown file, inform the model of this specification

instead of printing agent resposnes and search results in terminal please save them to appropriately formated json files for each iteration.

lets have a special function to handle the agent response and parse the search terms and actions

add informative print statements every step of the way to debug and see what the agent is doing and thinking

we should take in use input for a specific research question
    
please use termcolor to print different parts of the agent processses in different colors

always provide detailed instructions to the model considering everything carefully.
